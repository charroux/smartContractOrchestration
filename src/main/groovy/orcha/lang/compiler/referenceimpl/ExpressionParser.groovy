package orcha.lang.compiler.referenceimplimport java.util.List;
import orcha.lang.compiler.InstructionNode;import orcha.lang.compiler.OrchaCompilationExceptionimport orcha.lang.compiler.visitor.OrchaCodeVisitor;import orcha.lang.configuration.Application;
interface ExpressionParser {		void setOrchaCodeVisitor(OrchaCodeVisitor orchaCodeVisitor)		String failChannel(InstructionNode computeNode)		String failedServiceName(InstructionNode whenNode)		//String failChannel(InstructionNode whenNode, List<InstructionNode> graphOfInstructions)		List<String> getApplicationsNamesInExpression(String expression)		int getNumberOfApplicationsInExpression(String expression)		/**	 * 	 * @param expression	 * @param applicationName	 * @return the index (begins at 1) of applicationName in expression, 0 if there is no applicationName in expression, -1 if none instruction in graphOfInstructions has such an expression	 */	int getIndexOfApplicationInExpression(String expression, String applicationName)		List<String> getTerminatedApplicationsNamesInExpression(String expression)		List<Application> getApplicationsInExpression(String expression)
		/**	 * 	 * @param expression	 * @param graphOfInstructions	 * @return the release strategy expression for an aggregator	 */
	String releaseExpression(String expression)		/**	 * 	 * @param expression	 * @param instructionNode	 * @param graphOfInstructions	 * @return the expression for the transformer right after an aggregator	 */	String aggregatorTransformerExpression(String expression, InstructionNode instructionNode)		boolean isMultipleArgumentsInExpression(String expression, InstructionNode instructionNode)
	boolean isComputeFailsInExpression(InstructionNode instructionNode, String expression)		boolean isComputeFailsInExpression(String applicationName, String expression)		boolean isComputeTerminatesInExpression(InstructionNode instructionNode, String expression)		boolean isComputeTerminatesInExpression(String applicationName, String expression)		boolean isFailExpression(InstructionNode instructionNode)		boolean isSeveralWhenWithSameApplicationsInExpression(InstructionNode instructionNode)	
}
