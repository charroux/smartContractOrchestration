package orcha.lang.compiler.referenceimplimport java.util.List;
import orcha.lang.compiler.InstructionNode;import orcha.lang.compiler.OrchaCompilationExceptionimport orcha.lang.compiler.visitor.OrchaCodeVisitor;import orcha.lang.configuration.Application;
interface ExpressionParser {		String failChannel(InstructionNode computeNode, OrchaCodeVisitor orchaCodeParser)		String failedServiceName(InstructionNode whenNode, List<InstructionNode> graphOfInstructions)		String failChannel(InstructionNode whenNode, List<InstructionNode> graphOfInstructions)		List<String> getApplicationsNamesInExpression(String expression, List<InstructionNode> graphOfInstructions)		List<String> getTerminatedApplicationsNamesInExpression(String expression, List<InstructionNode> graphOfInstructions)		List<Application> getApplicationsInExpression(String expression, List<InstructionNode> graphOfInstructions)
		/**	 * 	 * @param expression	 * @param graphOfInstructions	 * @return the release strategy expression for an aggregator	 */
	String releaseExpression(String expression, List<InstructionNode> graphOfInstructions)		/**	 * 	 * @param expression	 * @param instructionNode	 * @param graphOfInstructions	 * @return the expression for the transformer right after an aggregator	 */	String aggregatorTransformerExpression(String expression, InstructionNode instructionNode, List<InstructionNode> graphOfInstructions)		boolean isMultipleArgumentsInExpression(String expression, InstructionNode instructionNode, List<InstructionNode> graphOfInstructions)
	boolean isComputeFailsInExpression(InstructionNode instructionNode, String expression)		boolean isComputeFailsInExpression(String applicationName, String expression)		boolean isComputeTerminatesInExpression(InstructionNode instructionNode, String expression)		boolean isComputeTerminatesInExpression(String applicationName, String expression)		boolean isFailExpression(InstructionNode instructionNode, List<InstructionNode> graphOfInstructions)		boolean isSeveralWhenWithSameApplicationsInExpression(InstructionNode instructionNode)	
}
