package orcha.lang.compiler.referenceimpl

import com.sun.codemodel.JCodeModel
import com.sun.codemodel.JDefinedClass
import com.sun.codemodel.JDocComment
import com.sun.codemodel.JMod
import com.sun.codemodel.writer.FileCodeWriter

import groovy.util.logging.Slf4j

import com.sun.codemodel.ClassType
import com.sun.codemodel.JAnnotationArrayMember

import java.io.File
import java.io.FileOutputStream

import org.objectweb.asm.AnnotationVisitor
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.FieldVisitor
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes

import org.springframework.context.annotation.ImportResource

@Slf4j
class OrchaLauncherGenerator {
	
	void generate(String xmlSpringContextFileName, String xmlSpringContextQoSFileName){
		
			// Generate java source file
			
			JCodeModel codeModel = new JCodeModel();
			def className = 'orcha.lang.ImportDynamicResourcesForConfiguration'
			
			JDefinedClass orchaLauncherClass = codeModel._class(JMod.PUBLIC, className, ClassType.CLASS)
			
			JDocComment jDocComment = orchaLauncherClass.javadoc();
			jDocComment.add(String.format("Do not edit this file : auto generated file"));
	
			orchaLauncherClass.annotate(ImportResource.class).paramArray("value").param(xmlSpringContextFileName).param(xmlSpringContextQoSFileName)	//.param("prefix", domain)
			
			String s = "." + File.separator + "src" + File.separator + "main" + File.separator + "java"
			FileCodeWriter fileCodeWriter = new FileCodeWriter(new File(s))
			codeModel.build(fileCodeWriter)
			fileCodeWriter.close()
			
			log.info 'Praparing of the Orcha program launching by the generation of the importation of Orcha orchestration files ' + xmlSpringContextFileName + ' and ' + xmlSpringContextQoSFileName + ' into ' + className + ' (' + s + ')'
			
			// generate java class file (useful to avoid refreshing the IDE like Eclipse
			
			ClassWriter cw = new ClassWriter(0);
			FieldVisitor fv;
			MethodVisitor mv;
			AnnotationVisitor av0;
			
			cw.visit(52, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, "orcha/lang/ImportDynamicResourcesForConfiguration", null, "java/lang/Object", null);
			
			av0 = cw.visitAnnotation("Lorg/springframework/context/annotation/ImportResource;", true);
			
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visit(null, xmlSpringContextFileName);
			av1.visit(null, xmlSpringContextQoSFileName);
			av1.visitEnd();
			
			av0.visitEnd();
			
			mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
			mv.visitCode();
			mv.visitVarInsn(Opcodes.ALOAD, 0);
			mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
			mv.visitInsn(Opcodes.RETURN);
			mv.visitMaxs(1, 1);
			mv.visitEnd();
			
			cw.visitEnd();
			
			byte[] bytes = cw.toByteArray()
			
			String fichier = "." + File.separator + "bin" + File.separator + "orcha" + File.separator + "lang" + File.separator +"ImportDynamicResourcesForConfiguration.class";
			File file = new File(fichier);
			FileOutputStream fos = new FileOutputStream(file);
			fos.write(bytes);
			fos.close();
			
			log.info 'Praparing of the Orcha program launching by the generation of the importation (binary version) of Orcha orchestration files ' + xmlSpringContextFileName + ', ' + xmlSpringContextQoSFileName + ' into ' + fichier
			
			log.info 'Praparing of the Orcha program launching done successfully'
			
	/*		// Generate java source file
			
			codeModel = new JCodeModel();
			className = 'orcha.lang.ImportDynamicResources'
			orchaLauncherClass = codeModel._class(JMod.PUBLIC, className, ClassType.CLASS)
			
			jDocComment = orchaLauncherClass.javadoc();
			jDocComment.add(String.format("Do not edit this file : auto generated file"));
	
			s = "." + File.separator + "src" + File.separator + "main" + File.separator + "java"
			fileCodeWriter = new FileCodeWriter(new File(s))
			codeModel.build(fileCodeWriter)
			fileCodeWriter.close()
			
			// generate java class file (useful to avoid refreshing the IDE like Eclipse
			
			cw = new ClassWriter(0);
			
			cw.visit(52, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, "orcha/lang/ImportDynamicResources", null, "java/lang/Object", null);
			
			av0 = cw.visitAnnotation("Lorg/springframework/context/annotation/ImportResource;", true);
			
			av1 = av0.visitArray("value");
			av1.visit(null, xmlSpringContextFileName);
			av1.visit(null, xmlSpringContextQoSFileName);
			av1.visitEnd();
			
			av0.visitEnd();
			
			mv = cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
			mv.visitCode();
			mv.visitVarInsn(Opcodes.ALOAD, 0);
			mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
			mv.visitInsn(Opcodes.RETURN);
			mv.visitMaxs(1, 1);
			mv.visitEnd();
			
			cw.visitEnd();
			
			bytes = cw.toByteArray()
			
			fichier = "." + File.separator + "bin" + File.separator + "orcha" + File.separator + "lang" + File.separator +"ImportDynamicResources.class";
			file = new File(fichier);
			fos = new FileOutputStream(file);
			fos.write(bytes);
			fos.close();
*/
	
	}

}
