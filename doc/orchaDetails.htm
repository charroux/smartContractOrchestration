<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="Programming, modeling and integration language">
    <meta name="author" content="Ben C.">
    <link rel="icon" href="http://v4-alpha.getbootstrap.com/favicon.ico">

    <title>Ocha: Programming, modeling and integration language</title>

    <!-- Bootstrap core CSS -->
    <link href="orcha_files/bootstrap.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="orcha_files/jumbotron.css" rel="stylesheet">    
  </head>

  <body>

    <nav class="navbar navbar-static-top navbar-dark bg-inverse">
      <a class="navbar-brand" href="./index.htm">Orcha language</a>
      <ul class="nav navbar-nav">
        <li class="nav-item active">
          <a class="nav-link" href="./index.htm">Home <span class="sr-only">(current)</span></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="./orchaAbout.htm">About</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="./orchaContact.htm">Contact</a>
        </li>
      </ul>
    </nav>

	<div><br></div>

    <div class="container">
      <!-- Example row of columns -->
      <div class="row">
        <div class="col-md-12">
        	<p>Orcha is a <a href="https://en.m.wikipedia.org/wiki/Proto-language">Proto-language</a> in the area of Information Technology i.e. a <i>first language</i> of a language family common to human beings and machines.
        	</p>
        	<p>For Orcha, the language family is that one of human activities. So Orcha (ORChestration of Human Activities) is a <i>first language</i> of the family of human activities common to human beings and machines.
        	</p>
        	<p>To be used by humans, not only Information Technology specialists, but for everybody, Orcha has:
        		<ul>
        			<li>Instructions describing daily life activities</li>
        			<li>Almost no learning time</li>
        			<li>Out of the box use with a simple <a href="#tooling">tooling</a></li>
        		</ul>
        	</p>
        	<p>To be a <i>first language</i> of the family of human activities:
        		<ul>
        			<li>Activities triggered by events for <a href="#event">real world/virtual world interactions</a></li>
        			<li>Orcha is <a href="#businessAdaptation">adaptable to any domain/business</a></li>
        			<li>Orcha has a rich expressiveness through a domain/business oriented <a href="#expressionLanguage">expression language</a></li>
 					<li>While an activity is processed, Orcha accepts the <a href="#activityAddition">addition of new activities</a> to reflect changes in the business</li>
					<li>Orcha relies and improves <a href="#method">enterprise practices</a> so it can be easily adopted</li>
        		</ul>
        	</p>
        	<p>To be used by machines :
        		<ul>
        			<li>Orcha programs have a few <a href="#language">instructions</a> (compute, receive, from, send, to, condition, when)</li>
        			<li>Orcha programs are represented by simple abstract syntax trees easy to parse by programs</li>
        			<li>All terms added to the instructions set that enhance the vocabulary of Orcha are fully specified by a simple language easy to interpret by programs (the <a href="#configuration">Orcha configuration language</a>)</li>
        		</ul>
        	</p>
        </div>  
      </div>
           
      <div class="row">
      <div class="col-md-12">
          <h2 id="event">Real world / virtual world interactions</h2>
          <h3>Orcha is event/message driven</h3>
          <p>Orcha interacts with the real world or the virtual world through events. An event can come from a sensor of the Internet of Things, a smartphone, when an email is received, when a file is put into a directory, and so on.
          </p>
          <p>Waiting for an event in Orcha is simple. Simply writes:</p>
          <code>receive event from source<br>
          </code>
          <p>event is a variable containing the event received from source. There is no need to declare event before using it in a receive instruction. Source is defined by the user or programmatically using the Orcha configuration language: at this step, humans or programs select the kind of event source used (databases, files…).
          </p>
          <p>Send an event is also easy. Simply write:
          </p>
          <code>send event to destination<br>
          </code>
          <p>Here again event is a variable and destination must be configured.</p>
          <h3>Activities are triggered by events</h3>
          <p>Activities are triggered by events using a compute instruction:</p>
          <code>compute makeSomething with event.value<br>
          </code>
          <p>Where event.value is the content of the received event.</p>
          <p>A basic configuration can remove the compute from the above instruction, so you should simply write:</p>
          <code>makeSomething with event.value<br>
          </code>
          <p>Activities from the real world are services (applications) in the virtual world. Orcha is programming language agnostic and this is at configuration step that the services are selected by the user or programmatically.
          </p>
          <h3>Waiting for the completion of an activity</h3>
          <p>To reflect the real world where activities can be done in parallel, Orcha computes activities asynchronously: all computes are processed in parallel and synchronization points (done by when instructions) wait for the completion of compute instructions:
          </p>
          <code>when “makeSomething terminates”<br>
          </code>
          <h3>Orcha is business oriented</h3>
          <p>Putting all together we can write our first Orcha program:</p>
          <code>receive event from source<br>
			makeSomething with event.value<br>
			when “makeSomething terminates”<br>
			send makeSomething.result to destination<br><br>
          </code>
          <p>For a realistic program, source, makeSomething and destination must be replaced by terms making sense in a business/domain. For instance:</p>
          <code>receive luggage from passenger<br>
			scanLuggage with luggage.content<br>
			when “scanLuggage terminates”<br>
			send scanLuggage.result to authority<br>        
          </code>
          <h3>Events can contain applications</h3>			  
          <p>While events bring information or data to an Orcha program, it can also describes a service. Consider the following example where recognitionAlgorithm is a service:
          </p>
          <code>receive recognitionAlgorithm from security<br>
			compute faceRecognition with recognitionAlgorithm.value<br>
          </code>
          <h3>Dispatching events</h3>
          <p>Dispatch the same event to many computes or sends is easy. Simply use any number of receive instructions as needed (two in the following example):  
          </p>
          <code>
          receive event from source<br>
			compute something with event.value<br><br>
			
			
			receive event from source<br>
			send event.value to destination<br>   
          </code>
          <p>In Orcha there is no switch… case instruction because there is no need of an instruction rarely used if there are simplest and equivalent instructions.
          </p>
          <p>To dispatch events filtered by a condition (see …) different variables must be used because finally the events are different since the conditions are different.
          </p>
          <code>
          receive event1 from source condition ...<br>
			compute something with event1.value<br><br>
			
			
			receive event2 from source condition ...<br>
			send event2.value to destination<br>          
          </code>
          <p>
          It is not possible to group many instructions in a block and trigger them together when an event occurs. For instance, it is not possible to write two computes when a single event occurs. You should use a subprogram instead : conceptually, a group of instructions is a sub activity (see subprogram).
          </p>
      </div>  
      </div>
     
     <div class="row">
      <div class="col-md-12">
          <h2 id="language">The Orcha language</h2>
          <p>The Orcha language defines a minimal set of instructions for the description of any human activities. In that sense, Orcha is a <i>first language</i>. As a Proto-language in the area of Information Technology, Orcha language is also common to human beings and machines.</p>
          <p>The instructions set is composed of:</p>
          <ul>
          	<li>receive : asynchronous waiting for an <a href="#event">event triggering</a> an activity. The event comes from the real world (a device for instance), an external service (an application) or is an event sent within an Orcha program by a send instruction</li>
          	<li>from : the source of an event received by the receive instruction</li>
          	<li>condition (optional) : when used with a receive, filters the events to be received, can also be used in an <a href="#expressionLanguage">Orcha expression</a></li>
          	<li>compute : processing of an activity (asynchronous service call i.e. application call)</li>
          	<li>with (optional) : information or data needed to process an activity (the arguments list of a service call separated by commas)</li>
          	<li>when : waits for the completion of an activity (asynchronous synchronization point for events and/or services (see <a href="#expressionLanguage">Orcha expression language</a>))</li>
          	<li>send : sends an event to the real world (a device), an external services or an Orcha program</li>
          	<li>to : the destination of an event to be sent</li>
          </ul>
      </div>  
      </div>
      
      <div class="row">
      <div class="col-md-12">
          <h2 id="businessAdaptation">Adaptation to a domain/business</h2>
          <p>
          Apart the instructions set (compute, receive, from, send, to, condition, when), every terms in an Orcha program, are defined by the user (or programmatically) and should be domain/business oriented.
          </p>
          <p>In the instructions below, advertising, advertiser and recognitionAlgorithm are defined by the user:
          </p>
          <code>
          	receive advertising from advertiser
			receive recognitionAlgorithm from security<br>
          </code>
          <p>The content of an event is accessible using dot value:
          </p>
          <code>compute someThing with advertising.value<br>
          </code>
          <p>In the case of a structured event, it is also possible to go deeper into this event. For example:
          </p>
          <code>compute someThing with advertising.value.author.name<br>
          </code>
          <p>Or simply:
          </p>
          <code>compute someThing with advertising.author.name<br>
          </code>
          <p>Where advertising contains the Json structure:
          </p>
          <code>
          {“author”:<br>
    		{“name”:”...”}<br>
			}<br>          
          </code>

          <h3 id="activityAddition">Dynamically addition of activities</h3>
          <p>Once an activity has been defined with the Orcha language, and the related activity is in process (the Orcha program is running), it is still possible to enhance the activity by the addition of others activities with no others instruction but the existing Orcha instructions set.</p>
          <p>An activity to be added is described as usual by Orcha instructions beginning by a receive:</p>
          <code>receive event from orchaEventHandler<br>
          </code>
          <p>where orchaEventHandler is a publication/subscription source. This source is always present out of the box in any Orcha program without any configuration. Such a source has any number of subscribers (many Orcha programs each beginning with the above instruction).</p>
          <p>On the other side, the side of the existing activity, there is, as usual, send instructions like:</p>
          <code>send event to x<br>
          </code>
          <p>Actually, each send instruction sends an event to two destinations: the given destination (x in the previous example) and the orchaEventHandler. So there is nothing to add but only the use of send instructions (as usual) to activate the orchaEventHandler.</p>
          <p>The instruction</p>
          <code>receive event from orchaEventHandler<br>
          </code>
          <p>receives all the events from all the send instructions. In order to select the events to be received, which is often useful, a condition can be added to the receive instruction:</p>
          <code>receive event from orchaEventHandler condition event.price < 1000<br>
          </code>
          <p>Events are filtered so only the selected events will be processed.</p>
          <p>Notice that the above receive instruction receives and filters the local events (events sent by any send instruction from all the running Orcha programs). But this publication/subscription mechanism can be used remotely using a message broker. Simply use the instruction</p>
          <code>send event to x<br>
          </code>
          <p>Where x must be configured to send the event to a message broker. On the remote side, orchaEventHandler (which is only available for a local use) must be replaced by</p>
          <code>receive event from y condition ...<br>
          </code>
          <p>Where y is configured to use the message broker.</p>
          
          <h3 id="subprogram">Orcha subprogram</h3>
          
          <p>When an activity is composed of several activities, subprograms can be used: one per sub activity.
          </p>
          <p>Consider the following main program where a compute is used to call a subprogram:
          </p>
          <code>compute subProgram with something<br>
          </code>
          <p>subProgram is an Orcha subprogram receiving the event something in one or many receive instructions. The following example has two receive instructions:
          </p>
          <code>
          receive event from mainProgram<br>
			…<br><br>
			
			
			receive event from mainProgram<br>
			…<br>          
          </code>
          <p>Unlike procedural programming where subprograms are sometimes used to improve the readability, Orcha subprograms are used to:
          </p>
          <p>
          	<ul>
          		<li>Improve performance and reliability because subprograms are loosely coupled components that can be processed in different processes or machines</li>
          		<li>Enhance the reusability of Orcha subprograms that can be integrated into many main programs</li>
          		<li>Modelize high level business/domain activities in main program hiding low level details in subprograms</li>
          	</ul>
          </p>
      </div>  
      </div>
           
      <div class="row">
      <div class="col-md-12">
          <h2 id="expressionLanguage">The Orcha expression language</h2>
          <p>Orcha uses an expression language in when clauses:
          </p>
          <code>when "(codeToBenchmark1 terminates condition == -1) and (codeToBenchmark2 terminates condition == 1)"<br>
          </code>
      </div>  
      </div>
      
      <div class="row">
      <div class="col-md-12">
          <h2 id="expressionServicesComparison">Comparison of services with the Orcha language</h2>
          
          <p>Comparison of services can be easily achieved in Orcha. The following program receives an order from a customer and compare two TV vendors:
          </p>
          <code>receive order from customer condition "order.product.specification == 'TV'"<br>
          compute vendor1 with order.value<br><br>
          receive order from customer condition "order.product.specification == 'TV'"<br>
          compute vendor2 with order.value<br><br>
          when "(vendor1 terminates) and (vendor2 terminates)"<br>
          compute selectBestVendor with vendor1.result, vendor2.result<br>
          when  "selectBestVendor terminates condition price<1000"<br>
		  send selectBestVendor.result to seller<br>
          </code>
          
      </div>  
      </div>      
      
      <div class="row">
      <div class="col-md-12">
          <h2 id="configuration">The Orcha configuration language</h2>
          
          <p>The Orcha configuration language enables the definition of domain/business terms added to an Orcha program. In the following program, source, something and destination must be configured:
          </p>
          <code>receive event from source<br>
          compute something with event.value<br>
          when “something terminates”<br>
          send something.result to destination<br>
          </code>
          <p>The Orcha configuration language has been designed to be written by humans or generated programmatically. Configurations are written in Groovy/Java but JSon can be used.
          </p>
          <p>
          At the beginning of a project the configuration should be as simple as possible in order to verify easily that the Orcha program and the corresponding business/domain activities match. Perhaps flat files are enough as data sources and certainly basic versions of applications can be used. Here, no advanced skills are necessary to write such a configuration. But in order to defines a configuration ready for production, an operational is needed because he/she knows which and where are the data sources, the applications to be integrated, and so one. Applications are written by developers. Hence, Orcha brings the business/domain to <a href="https://en.wikipedia.org/wiki/DevOps">DevOps</a> methods,and transforms a DevOps project into a BusDevOps project.
          </p>
          <p>An Orcha program can get used in several environments. For instance, an event coming from a smartphone can comes from an Email when the same Orcha program is used in two different environments, or a service called by a compute may change according to the environment. In such a case, configurations can be generated automatically by computers.
          </p>
          <p>
          The Orcha configuration language is divided into two parts:
          </p>
          <p>
          	<ul>
          		<li>The configuration of service calls (an application call) with the compute instruction</li>
          		<li>The configuration of the event sources or destination sources for the receive and send instructions</li>
          	</ul>
          </p>
          <p>
          </p>For a service call, the configuration defines:
          </p>
          <p>
          	<ul>
          		<li>The location of the service. Is it a local or a remote service (a web service for instance)?</li>
          		<li>The protocol to access the service (http for instance)</li>
          		<li>What are the argument types of the service?</li>
          		<li>What is the returned type?</li>
          		<li>Optionally the programming language of the service</li>
          	</ul>          
          </p>
          <p>Here is an example of a configuration for a service running on the local machine written in the JavaScript language:
          </p>
          <code>Application vendor1(){<br>
	        def jsApp = new Application(name: "vendor1", language: "js")<br>
	        def scriptAdapter = new ScriptServiceAdapter(file: 'file:orcha/service/order/vendor1.js')<br>
	        jsApp.input = new Input(type: "service.order.SpecificOrder", adapter: scriptAdapter)<br>
	        jsApp.output = new Output(type: "service.order.Bill", adapter: scriptAdapter)<br>
	        return jsApp<br>
	    }<br>
          </code>
          <p>
          For an event source or a destination source, the configuration defines:
          </p>
          <p>
          	<ul>
          		<li>The kind of sources or destinations. Is it a SQL database, a NoSQL database, a file, an Email…?</li>
          		<li>The data format for the content of the event</li>
          		<li>How and when events are triggered (the frequency at which files are read for example)?</li>
          	</ul>
          </p>
          <p>
          Here is an example of a configuration where the files of a directory are used as source of events:
          </p>
          <code>
          EventHandler customer(){<br>
          def eventHandler = new EventHandler(name: "customer")<br>
        def fileAdapter = new InputFileAdapter(directory: 'C:/Users/BenC', filenamePattern: "*.json")<br>
        eventHandler.input = new Input(mimeType: "application/json", type: "service.order.Order", adapter: fileAdapter)<br>
        return eventHandler<br>
	}<br>     
          </code>
          <p>
          The reference implementation of Orcha relies on an integration framework offering many configuration options. Here are the current list of these options:
          </p>
          <p>
          	<ul>
          		<li>AMQP</li>
          		<li>Feed</li>
          		<li>File</li>
          		<li>FTP(S)</li>
          		<li>Gemfire</li>
          		<li>HTTP</li>
          		<li>JDBC</li>
          		<li>JMS</li>
          		<li>JPA</li>
          		<li>Mail</li>
          		<li>MongoDB</li>
          		<li>Redis</li>
          		<li>SFTP</li>
          		<li>Syslog</li>
          		<li>TCP</li>
          		<li>Twitter</li>
          		<li>UDP</li>
          		<li>Web Services</li>
          		<li>Web Sockets</li>
          		<li>XMPP</li>
          	</ul>
          </p>
          <p>However, the actual version of Orcha offers a few of these options, but it has been designed to facilitate the integration of the other options.
          </p>
          
            </div>  
      </div>
      
        <div class="row">
      <div class="col-md-12">
          <h2 id="tooling">Orcha tooling</h2>
          
          <p>
          <a href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</a> must be installed to create Orcha programs. The recommended version is Java Development Kit version 8 (link). Additional softwares may be installed depending on the configuration of Orcha programs: a message broker like ZeroMQ, a NoSQL database like MongoDB for instance.
          </p>
          <p><a href="https://en.wikipedia.org/wiki/Gradle">Gradle</a> must also be installed. Gradle is an open source project available on any platform (Windows, Mac, Linux): see the installation procedure. Gradle is used to build an Orcha project from scratch. This tool is also used to generate executable programs. Executable programs are generated from Orcha programs with their configurations. Executable Orcha programs drive activities exactly as they have been described by the Orcha language: they will wait for events when receive instructions are computed, they will launch services when compute instructions are computed, and so on.
          </p>
          <p>
          From a service point of view, each Orcha executable program makes orchestration of services. Many compose programs (many orchestrators) interact with each other. Hence the architectural style of Orcha applications is the Microservice style, where the design of the architecture is business/domain driven.
          </p>
          <p>
          All the stakeholders of an Orcha project (business analysts, operations and developers) can use the same tool to write Orcha programs, their configurations and the associated services: an Integrated Development Environment (IDE). An IDE supporting the Groovy language must be chosen since the configuration language for Orcha programs is Groovy. Many open source IDE can be used like <a href="https://spring.io/tools/ggts">Eclipse</a>.
          </p>
          <p>
          It is recommended to share a single Orcha project with all the stakeholders during the life cycle of the project. Usual practices in software development used in a DevOps approach are recommended:
          	<ul>
          		<li>Share the Orcha program, its different configurations and the associated services in a repository of code and use revision control systems like <a href="https://github.com/">github</a> to archive the different versions</li>
          	</ul>
		
		</p>
		<p>The principle of revision control systems like <a href="https://en.wikipedia.org/wiki/Git">Git</a> is: a server centralizes all the programs and their configurations with all the histories of modifications. Then each stakeholder gets on his own machine a copy of the project or only the part of the project he/she is interested in.
		</p>
		<p>See the how-to tutorial to discover how to use these tools.
		</p>
		<p>Advanced practices from the DevOps approach may also be used for complex projects:
			<ul>
			<li>Use the same environment for testing and production</li>
			<li>Automate testing</li>
			<li>...</li>
			</ul>
		</p>
		<p>These tool will allow you to generate executable programs. Executable Orcha programs are:
			<ul>
				<li>Portable: Java must be installed to run an Orcha program.</li>
				<li>Lightweight: the weight of an Orcha program is few tens of Mo</li>
				<li><a href="https://projects.spring.io/spring-boot/">Spring Boot</a> programs: the de facto open source standard for enterprise application in Java</li>
			</ul>
		</p>
            </div>  
      </div>
      
      <footer>
        <p>© OLab-Dynamics 2016
        <img src="./orcha_files/olab-logos.png" class="img-responsive" alt="Responsive image">
        </p>
      </footer>
    </div> <!-- /container -->


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="orcha_files/jquery.js"></script>
    <script>window.jQuery || document.write('<script src="../../assets/js/vendor/jquery.min.js"><\/script>')</script>
    <script src="orcha_files/bootstrap.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="orcha_files/ie10-viewport-bug-workaround.js"></script>
  

</body></html>